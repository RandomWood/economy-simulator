using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Dapper;
using FFMpegCore.Enums;
using Npgsql;
using Roblox.Models.Assets;
using Roblox.Models.Sessions;
using Roblox.Models.Users;
using Roblox.Services.App.FeatureFlags;
using Roblox.Website.Controllers;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.PixelFormats;
using Type = System.Type;

namespace Roblox.Services.IntegrationTest;

public class TestBase
{
    static TestBase()
    {
        Roblox.Configuration.SignupAssetIds = new List<long>();
        // DB
        Console.WriteLine("Configure db...");
        Roblox.Services.Database.Configure("Database=roblox_integration_test; Username=roblox_integration_test_user; Password=docker; Host=postgres; Port=5432;");
        Console.WriteLine("Configure redis...");
        Roblox.Services.Cache.Configure("redis");
        Console.WriteLine("Load flags...");
        // Must load flags before everything
        FeatureFlags.UpdateFlags();
        FeatureFlags.DisableFlagSync(FeatureFlag.TradePreventAcceptanceIfTooManyCopies);
        Console.WriteLine("Wait for DB to be ready...");
        while (true)
        {
            try
            {
                using var cancel = new CancellationTokenSource();
                cancel.CancelAfter(TimeSpan.FromSeconds(5));
                Database.connection.Query("SELECT * FROM \"user\";", cancel.Token);
                Console.WriteLine("DB Ok");
                break;
            }
            catch (PostgresException e)
            {
                // relation x does not exist
                if (e.SqlState != "42P01")
                {
                    throw;
                }
                Console.WriteLine("wait for db to be created...");
                System.Threading.Thread.Sleep(TimeSpan.FromSeconds(5));
            }
        }
    }
    
    public TestBase()
    {
        
    }

    public async Task<long> CreateRandomUser()
    {
        var name = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 14);
        var usersService = new UsersService();
        var result = await usersService.CreateUser(name, "AmogusDrip69", Gender.Male);
        await usersService.InsertOrUpdateMembership(result.userId, MembershipType.BuildersClub);
        return result.userId;
    }


    public async Task<Stream> GetPng()
    {
        // generated by https://png-pixel.com/
        var imagePng100By100BlueBg =
            "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAnElEQVR42u3RAQ0AAAgDoL9/aK3hHFSgyUw4o0KEIEQIQoQgRAhChAgRghAhCBGCECEIEYIQhAhBiBCECEGIEIQgRAhChCBECEKEIAQhQhAiBCFCECIEIQgRghAhCBGCECEIQYgQhAhBiBCECEEIQoQgRAhChCBECEIQIgQhQhAiBCFCEIIQIQgRghAhCBGCECFChCBECEKEIOS7BU5Hx50BmcQaAAAAAElFTkSuQmCC";
        var bytes = Convert.FromBase64String(imagePng100By100BlueBg);
        var contents = new StreamContent(new MemoryStream(bytes));
        return await contents.ReadAsStreamAsync();
    }
    
    public async Task<long> CreateRandomGroup(long ownerUserId)
    {
        var name = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 14);
        var description = "Integration test group generated at " 
                          + DateTime.UtcNow.ToString("f")
                          +"\n"
                          +"OriginalOwnerUserId="+ownerUserId
                          +"\n"
                          + new Exception().StackTrace;
        using var gs = ServiceProvider.GetOrCreate<GroupsService>();
        var icon = await GetPng();
        var group = await gs.CreateGroup(name, description, icon, ownerUserId);
        return group.id;
    }

    public async Task<long> CreateRandomItem(long creatorId)
    {
        var name = Guid.NewGuid().ToString();
        var description = "Integration test item generated at " + DateTime.UtcNow.ToString("f");
        var asset = new AssetsService();
        // random data to prevent "The process cannot access the file '/src/Roblox.IntegrationTest/bin/Debug/net6.0/e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' because it is being used by another process."
        const int fakeFileSize = 128 * 1024;
        var data = new byte[fakeFileSize];
        new Random().NextBytes(data);
        var fakeItem = new MemoryStream(fakeFileSize);
        fakeItem.Write(data);

        var assetId = await asset.CreateAsset(name, description, creatorId, CreatorType.User, creatorId, fakeItem,
            Models.Assets.Type.Model, Genre.Adventure, ModerationStatus.ReviewApproved, default, default, default,
            true);
        return assetId.assetId;
    }
    
    public async Task<long> CreateRandomGroupItem(long groupId)
    {
        var name = Guid.NewGuid().ToString();
        var description = "Integration test item generated at " + DateTime.UtcNow.ToString("f");
        var asset = new AssetsService();
        // random data to prevent "The process cannot access the file '/src/Roblox.IntegrationTest/bin/Debug/net6.0/e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' because it is being used by another process."
        var fakeItem = new MemoryStream(128);
        new Random().NextBytes(fakeItem.GetBuffer());
        
        var assetId = await asset.CreateAsset(name, description, 1, CreatorType.Group, groupId, fakeItem,
            Models.Assets.Type.Model, Genre.Adventure, ModerationStatus.ReviewApproved, default, default, default,
            true);
        return assetId.assetId;
    }

    protected T ControllerAuth<T>(long userId) where T : ControllerBase, new()
    {
        return new T()
        {
            userSessionForTests = new UserSession(userId, "username", DateTime.Now, AccountStatus.Ok, 1,
                false, Guid.NewGuid().ToString()),
        };
    }
}